I am not certain how to implement a two-player game such as tic-tac-toe: would
I let one player create a game and issue an announcement, and then
get the second player to pick among a list of games that are in need of a second
player? If so, the Game kind would have a Boolean property called "need a
second player", and there needs to be an endpoint called 'pick a game waiting
for another player', and a form that is a list of such waiting games. If I do
that, then what would I do if it were a multi-player game? Will I keep adding
properties like 'need an nth player' and so on? That obviously would not be
scalable. Taking hint from the sample conference app, I decide that it will be
better to have a property called 'seatsAvailable' which gets decremented each
time a player signs up. So I did that.

I contemplated with the ways to keep a game log. Do I make a property called
'moveLog', or use ancestor relationship to create move, and then use that
relationship to connect moves to their game parent? I took the latter approach.

Game entities are created with player as the parent. Creating a game is
different from signing up for a game in my tic-tac-toe game API.  When a player
signs up for a game, the game key gets stored in the player's gamesInProgress
property. The trouble is that when a game gets deleted by a player, it still
can be in the gamesInProgress list of a Player, if the programmer(here me)
forgets to update the Player. Is there an automatically linked way of storing
this gamesInProgress property of Player so it is in sync with Game? I can
not think of any. Perhaps then the least confusing way is not to have this
property alltogether? For the time being I keep this property to facilitate the
calculation of ranking.

A two-player game such as tic-tac-toe requires a turn mechanism for makeMove
method. Initially I resorted to checking the player of the last move, it
somehow did not work; it was probably because the check was needed to determine
if a Move should be created; but to assess the check the last move had to be
retrieved first. That could have created a circular logic, in that before the
current Move is to be created, that is no 'last Move' to speak of. So I
switched from checking Move to checking the 'lastPlayer' property of Game,
with success in the end.

The makeMove method also brings up another question about transaction. A
decorator like '@ndb.transactional(xg=True)' should be required for makeMove
 method since makeMove involves updating all of Move, Game, and Player entities.
Adding '@ndb.transactional(xg=True)' just above 'def makeMove' broke the
method with 'AttributeError: 'TransactionalConnection' object has no attribute
'async_allocate_ids'

Reflections on the first review:
1.'You seem to be trying to implement your own version of some of the features
 that Google takes care of behind the scene, like user authentication.': I did
 not implement my own version of user authentication, rather, I did not
 uncouple user from the player: in my first submission, the user is the player,
 and one user becomes the (one and only) player, like so:

user_id = getUserId(user)

p_key = ndb.Key(Player, user_id)

 that could be limiting in the game app where a user may want to assume
 multiple personas.  So I uncoupled that in the second submission (also see 4).
2.'All the endpoints and methods should be the same': I renamed methods to
 conform to the sample app, and removed additional methods that were not in
 the sample app.
3. 'once you change your models, you'll want to rewrite the make_move logic to
take advantage of the new structure': I am not sure what was wrong with my
models in the first_submission version, and what 'new structure' I should go
for.
4.'You should have a Resource Container for the players!'A resource container
for Player becomes necessary once I decoupled user from Player (see 1), so I
added that.
